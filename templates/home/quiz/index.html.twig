{% extends 'home/homeLayout.html.twig' %}

{% block stylesheets %}
    {{ parent() }}
    <link rel="stylesheet" href="{{ asset('css/quizz.css') }}">
{% endblock %}

{% block body %}
<div class="cours_quizz">
    <div class="content">
        <div class="container">
            <div class="quizz_header">
                <div class="timer">{{ questionDetails.quiz.duree }}</div>
                <div class="steps">{{ questionDetails.currentQuestionIndex + 1 }}/{{ questionDetails.totalQuestions }}</div>
            </div>

            <div class="quizz_core">
                <div class="question">{{ questionDetails.currentQuestion.question }}</div>
                {% if questionDetails.currentQuestion.image %}
                    <div class="img_holder">
                        <img src="{{ asset(questionDetails.currentQuestion.image) }}" alt="">
                    </div>
                {% endif %}
                <div class="rep_holder">
                    <div class="row">
                    {% for sug in questionDetails.currentQuestion.getSuggestions %}
                        <div class="col-md-6">
                            <div class="form-check">
                                <input class="form-check-input" type="radio" name="question_{{ questionDetails.currentQuestion.id }}" value="{{ sug.id }}" data-status="{{ sug.status }}" id="sug{{ loop.index }}">
                                <label class="form-check-label" for="sug{{ loop.index }}">{{ sug.suggestion }}</label>
                            </div>
                        </div>
                    {% endfor %}
                    </div>
                </div> 
				<div class="n_btn_holder">
                {% if not questionDetails.isLastQuestion %}
					<a href="{{ path('home_quizz_quiz_question', {'coursId': questionDetails.quiz.coursid.id, 'questionIndex': questionDetails.currentQuestionIndex + 1 }) }}">
                        <button class="btn_main"id="nextSubmitQuiz" type="submit">Next</button>
                    </a>
                {% else %}
                    <button class="btn_main" id="submitQuiz" type="submit">Soumettre</button>
                {% endif %}
            </div>
            </div>
        </div> 
    </div> 

{% block javascripts %}
<script>
document.addEventListener('DOMContentLoaded', function() {
    localStorage.removeItem('scoreSubmitted');
    let totalQuestions = {{ questionDetails.totalQuestions }};
    let score = parseInt(localStorage.getItem('score'), 10) || 0;

    function updateScore(isFinalSubmit) {
        const selectedRadio = Array.from(document.querySelectorAll('.form-check-input')).find(radio => radio.checked);
        if (selectedRadio && selectedRadio.dataset.status === '1') {
            score++;
            if (!isFinalSubmit) {
                localStorage.setItem('score', score.toString());
            }
        }
    }

    function isAnswerSelected() {
        return Array.from(document.querySelectorAll('.form-check-input')).some(radio => radio.checked);
    }

    document.querySelectorAll('#nextSubmitQuiz, #submitQuiz').forEach(button => {
        button.addEventListener('click', function(e) {
            if (!isAnswerSelected()) {
                e.preventDefault();
                alert("Please select an answer before proceeding.");
                return;
            }
            const isFinalSubmit = this.id === 'submitQuiz';
            if (isFinalSubmit) {
                e.preventDefault();
                updateScore(true);
                submitScore();
            } else {
                updateScore(false);
            }
        });
    });

    function submitScore() {
		if (localStorage.getItem('scoreSubmitted')) return;
    	localStorage.setItem('scoreSubmitted', 'true'); 

        let scaledScore = (score / totalQuestions) * 20;
       scaledScore = scaledScore.toFixed(2);
        fetch('{{ path('home_quizz_submit_score') }}', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                score: scaledScore,
                quizId: '{{ questionDetails.quiz.id }}',
                userId: 18 //TODO changer userID
            })
        })
        .then(response => response.json())
        .then(data => {
            if (data.status === 'success') {
                localStorage.removeItem('score');
                window.location.href = '{{ path('home_quizz_note', {'quizId': questionDetails.quiz.id}) }}';
            } else {
                console.error('Submission failed');
            }
        });
    }

     let startTime = localStorage.getItem('startTime');
    let currentTime = new Date().getTime();
    let durationString = "{{ questionDetails.quiz.duree }}";
    let parts = durationString.split(':');
    let durationHours = parseInt(parts[0], 10);
    let durationMinutes = parseInt(parts[1], 10);
    let durationSeconds = parseInt(parts[2], 10);
    let totalDurationSeconds = (durationHours * 3600) + (durationMinutes * 60) + durationSeconds;
    
    if (!startTime) {
        startTime = currentTime;
        localStorage.setItem('startTime', startTime);
    } else {
        let timeElapsed = Math.floor((currentTime - startTime) / 1000);
        totalDurationSeconds -= timeElapsed;
    }

    let display = document.querySelector('.timer');
    

    function startTimer(duration, display) {
        let timer = duration, hours, minutes, seconds;
        let countdown = setInterval(function () {
            hours = parseInt(timer / 3600, 10);
            minutes = parseInt((timer % 3600) / 60, 10);
            seconds = parseInt(timer % 60, 10);

            hours = hours < 10 ? "0" + hours : hours;
            minutes = minutes < 10 ? "0" + minutes : minutes;
            seconds = seconds < 10 ? "0" + seconds : seconds;

            display.textContent = hours + ":" + minutes + ":" + seconds;

			if (--timer < 0) {
				clearInterval(countdown);
				display.textContent = "00:00:00";
				localStorage.removeItem('startTime'); 
				submitScore(); 
				countdown = null; 
			}

        }, 1000);
    }

     if (display && !isNaN(totalDurationSeconds) && totalDurationSeconds > 0) {
        startTimer(totalDurationSeconds, display);
    } else {
        console.error('Timer or duration not defined, incorrect format, or expired.');
    }
});
</script>
{% endblock %}




{% endblock %}


