{% extends 'home/homeLayout.html.twig' %} 
{% block stylesheets %}
	{{ parent() }} 
    
{% endblock %}


{% block body %}

<div class="detection">

     <div class="videoContainer">
        <video autoplay="true" id="videoElement"></video>
        <canvas id="canvas"></canvas>
    </div>

    <div class="labelContainer">
        <h2 class="prediction"></h2>
    </div>
</div>
	 
{% endblock %}


{% block scripts %}
	{{ parent() }}


    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/@tensorflow/tfjs"></script>
    <script src="https://cdn.jsdelivr.net/npm/@tensorflow-models/coco-ssd"></script>
<script>
        $(document).ready(function () {
            let video = document.getElementById("videoElement");
            let canvas = document.getElementById("canvas");
            let ctx = canvas.getContext("2d");

            async function runCoco() {
                const net = await tf.loadGraphModel('{{ asset("model/model.json") }}');
 
                setInterval(() => {
                    detect(net);
                }, 16.7);
            }

            async function detect(net) {
                if (
                    typeof video !== "undefined" &&
                    video !== null &&
                    video.readyState === 4
                ) {
                    const videoWidth = video.videoWidth;
                    const videoHeight = video.videoHeight;

                    video.width = videoWidth;
                    video.height = videoHeight;
                    canvas.width = videoWidth;
                    canvas.height = videoHeight;

                    const img = tf.browser.fromPixels(video);
                    const resized = tf.image.resizeBilinear(img, [640, 480]);
                    const casted = resized.cast('int32');
                    const expanded = casted.expandDims(0);
                    const obj = await net.executeAsync(expanded);

                    const boxes = await obj[1].array();
                    const classes = await obj[2].array();
                    const scores = await obj[4].array();

                    drawSigns(boxes[0], classes[0], scores[0], 0.8, videoWidth, videoHeight);

                    tf.dispose(img);
                    tf.dispose(resized);
                    tf.dispose(casted);
                    tf.dispose(expanded);
                    tf.dispose(obj);
                }
            }

            function drawSigns(boxes, classes, scores, threshold, imgWidth, imgHeight) {
                let prediction = '';
                for (let i = 0; i < boxes.length; i++) {
                    if (boxes[i] && classes[i] && scores[i] > threshold) {
                        const [y, x, height, width] = boxes[i];
                        const text = classes[i];
                        const labelMap = {
                            1: { name: 'Bonjour', color: 'purple' },
                            2: { name: 'Merci', color: 'yellow' },
                            3: { name: 'Je t aime', color: 'lime' },
                            4: { name: 'Oui', color: 'blue' },
                            5: { name: 'Non', color: 'red' },
                        };

                        ctx.strokeStyle = labelMap[text].color;
                        ctx.lineWidth = 10;
                        ctx.fillStyle = 'white';
                        ctx.font = '30px Arial';

                        ctx.beginPath();
                        ctx.fillText(labelMap[text].name + ' - ' + Math.round(scores[i] * 100) / 100, x * imgWidth, y * imgHeight - 10);
                        ctx.rect(x * imgWidth, y * imgHeight, width * imgWidth / 2, height * imgHeight / 1.5);
                        ctx.stroke();

                        prediction += labelMap[text].name + ', ';
                    }
                }
                $(".prediction").text( prediction.slice(0, -2));
            }

            navigator.mediaDevices.getUserMedia({ video: true })
                .then(function (stream) {
                    video.srcObject = stream;
                })
                .catch(function (error) { 
                });

            runCoco();
        });
    </script>
{% endblock %}